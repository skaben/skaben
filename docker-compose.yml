version: "3.6"

services:

  api:
    image: 'skaben-api:latest'
    restart: unless-stopped
    build:
      context: server_core/.
      target: api_build
    env_file: 'server_core/.env'
    volumes:
      - ./server_core:/opt/app
      - static_volume:/static
      - ./server_core/static:/static/static
      - files_volume:/media
    depends_on:
      - db
      - rabbitmq
      - redis
    networks:
      - network_public
      - network_backbone
    command: |
      sh -c "/opt/app/entrypoint.sh"

  worker:
    <<: &worker
      image: 'skaben-api:latest'
      build:
        context: server_core/.
        target: base_build
        cache_from:
          - 'skaben-api'
          - '*'
      env_file: 'server_core/.env'
      volumes:
        - ./server_core:/opt/app
      depends_on:
        - api
      networks:
        - network_backbone
      restart: unless-stopped
      command: python manage.py start_worker internal

  worker_save:
    <<: *worker
    command: python manage.py start_worker state

  worker_send:
    <<: *worker
    command: python manage.py start_worker client

  worker_mqtt:
    <<: *worker
    command: python manage.py start_worker mqtt

  scheduler:
    <<: *worker
    command: python manage.py start_scheduler

 # front:
 #   image: 'skaben-front:latest'
 #   build:
 #     context: server_front/.
 #   environment:
 #     - CHOKIDAR_USEPOLLING=True
 #     - VUE_HOST=0.0.0.0
 #     - VUE_PORT=3000
 #   command: |
 #     sh -c "yarn run dev"
 #   volumes:
 #     - ./server_front/app:/app
 #     - ./server_front/app/dist:/app/dist
 #     - node_modules:/app/node_modules
 #     - static_volume:/static
 #   networks:
 #     - network_public

  ### INFRASTRUCTURE ###

  rabbitmq:
    build: './docker_build/rabbitmq'
    hostname: "rabbitmq"
    ports:
      - "15672:15672"
      - "15674:15674"
      - "15675:15675"
      - "15692:15692"
      - "5672:5672"
      - "1883:1883"
      - "8883:8883"
    networks:
      - network_public  # admin interface
      - network_backbone

  redis:
    image: "redis:alpine"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - network_backbone

  db:
    image: postgres:13.4
    restart: unless-stopped
    volumes:
      - db_volume:/var/lib/postgresql/data
      - ./tmp:/home/root/tmp
    networks:
      - network_backbone
    ports:
      - "5432:5432"
    env_file: "server_core/.env"

  portainer:
    image: portainer/portainer-ce:latest
    networks:
      - network_public
    ports:
      - "9000:9000"
    volumes:
      - portainer_volume:/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped

  nginx:
    build: './docker_build/nginx'
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./docker_build/wait-for-it.sh:/wait-for-it.sh
      - ./docker_build/nginx/conf.d/:/etc/nginx/conf.d/
      - ./logs/nginx:/var/log/nginx
      - static_volume:/static
    depends_on:
      - api
  #    - front
    networks:
      - network_public

  panel:
    image: 'skaben-panel:latest'
    restart: unless-stopped
    build:
      context: server_panel/.
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5000
      - ASPNETCORE_HTTP_PORT=5000
#      - ASPNETCORE_HTTPS_PORTS=5001
    depends_on:
      - api 
    networks:
      - network_public
      - network_backbone
    ports:
      - "5000:5000"
      
volumes:
  db_volume: {}
  redis_data: {}
  static_volume: {}
  files_volume: {}
  node_modules: {}
  portainer_volume: {}

networks:
  network_backbone:
  network_public:
#    ipam:
#      config:
#        - subnet: 10.8.0.0/16